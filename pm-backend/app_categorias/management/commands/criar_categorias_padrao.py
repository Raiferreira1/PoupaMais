from django.core.management.base import BaseCommand
from app_categorias.models import Categoria

class Command(BaseCommand):
    help = 'Cria categorias padr√£o do sistema'

    def handle(self, *args, **options):
        # Categorias padr√£o com suas palavras-chave
        categorias_padrao = [
            {
                'nome': 'Alimenta√ß√£o',
                'tipo': 'Despesa',
                'descricao': 'Gastos com alimenta√ß√£o, mercado, restaurantes, etc.',
                'palavras_chave': ['mercado', 'supermercado', 'restaurante', 'comida', 'lanche', 'pizza', 'padaria', 'feira', 'hortifruti']
            },
            {
                'nome': 'Transporte',
                'tipo': 'Despesa',
                'descricao': 'Gastos com transporte p√∫blico, combust√≠vel, etc.',
                'palavras_chave': ['uber', '√¥nibus', 'combust√≠vel', 'gasolina', 'metr√¥', 'passagem', 'carro', 'taxi', '99', 'cabify']
            },
            {
                'nome': 'Sa√∫de',
                'tipo': 'Despesa',
                'descricao': 'Gastos com sa√∫de, farm√°cia, consultas m√©dicas, etc.',
                'palavras_chave': ['farm√°cia', 'rem√©dio', 'consulta', 'dentista', 'hospital', 'm√©dico', 'exame', 'plano de sa√∫de']
            },
            {
                'nome': 'Lazer',
                'tipo': 'Despesa',
                'descricao': 'Gastos com entretenimento, lazer, etc.',
                'palavras_chave': ['cinema', 'show', 'bar', 'viagem', 'passeio', 'parque', 'teatro', 'museu', 'shopping']
            },
            {
                'nome': 'Educa√ß√£o',
                'tipo': 'Despesa',
                'descricao': 'Gastos com educa√ß√£o, cursos, material escolar, etc.',
                'palavras_chave': ['livro', 'curso', 'faculdade', 'escola', 'material', 'universidade', 'col√©gio', 'apostila']
            },
            {
                'nome': 'Moradia',
                'tipo': 'Despesa',
                'descricao': 'Gastos com moradia, aluguel, contas, etc.',
                'palavras_chave': ['aluguel', 'condom√≠nio', 'luz', '√°gua', 'internet', 'telefone', 'energia', 'g√°s', 'iptu']
            },
            {
                'nome': 'Sal√°rio',
                'tipo': 'Receita',
                'descricao': 'Receitas de sal√°rio e rendimentos',
                'palavras_chave': ['sal√°rio', 'pagamento', 'provento', 'renda', 'ordenado', 'remunera√ß√£o']
            },
            {
                'nome': 'Outros',
                'tipo': 'Despesa',
                'descricao': 'Categoria para transa√ß√µes n√£o classificadas',
                'palavras_chave': []
            }
        ]

        self.stdout.write('Criando categorias padr√£o...')
        
        for cat_data in categorias_padrao:
            categoria, created = Categoria.objects.get_or_create(
                nome=cat_data['nome'],
                defaults={
                    'tipo': cat_data['tipo'],
                    'descricao': cat_data['descricao'],
                    'padrao': True  # Marcar como categoria padr√£o
                }
            )
            
            # Se a categoria j√° existia mas n√£o estava marcada como padr√£o, atualizar
            if not created and not categoria.padrao:
                categoria.padrao = True
                categoria.save()
                print(f"üîÑ Categoria marcada como padr√£o: {categoria.nome}")
            
            if created:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Criada categoria: {categoria.nome} ({categoria.tipo})')
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f'‚ÑπÔ∏è Categoria j√° existe: {categoria.nome} ({categoria.tipo})')
                )
        
        self.stdout.write(
            self.style.SUCCESS(f'\nüéâ Processo conclu√≠do! Total de categorias: {Categoria.objects.count()}')
        ) 