from django.db.models.signals import post_migrate
from django.dispatch import receiver
from django.apps import apps
from .models import Categoria

@receiver(post_migrate)
def criar_categorias_padrao_apos_migracao(sender, **kwargs):
    """
    Signal que cria categorias padr√£o automaticamente ap√≥s migra√ß√µes.
    Garante que as categorias estejam sempre dispon√≠veis.
    """
    # Verificar se √© o app correto
    if sender.name == 'app_categorias':
        print("=== VERIFICANDO CATEGORIAS PADR√ÉO ===")
        
        # Categorias padr√£o com suas palavras-chave
        categorias_padrao = [
            {
                'nome': 'Alimenta√ß√£o',
                'tipo': 'Despesa',
                'descricao': 'Gastos com alimenta√ß√£o, mercado, restaurantes, etc.'
            },
            {
                'nome': 'Transporte',
                'tipo': 'Despesa',
                'descricao': 'Gastos com transporte p√∫blico, combust√≠vel, etc.'
            },
            {
                'nome': 'Sa√∫de',
                'tipo': 'Despesa',
                'descricao': 'Gastos com sa√∫de, farm√°cia, consultas m√©dicas, etc.'
            },
            {
                'nome': 'Lazer',
                'tipo': 'Despesa',
                'descricao': 'Gastos com entretenimento, lazer, etc.'
            },
            {
                'nome': 'Educa√ß√£o',
                'tipo': 'Despesa',
                'descricao': 'Gastos com educa√ß√£o, cursos, material escolar, etc.'
            },
            {
                'nome': 'Moradia',
                'tipo': 'Despesa',
                'descricao': 'Gastos com moradia, aluguel, contas, etc.'
            },
            {
                'nome': 'Sal√°rio',
                'tipo': 'Receita',
                'descricao': 'Receitas de sal√°rio e rendimentos'
            },
            {
                'nome': 'Outros',
                'tipo': 'Despesa',
                'descricao': 'Categoria para transa√ß√µes n√£o classificadas'
            }
        ]
        
        categorias_criadas = 0
        categorias_existentes = 0
        
        for cat_data in categorias_padrao:
            categoria, created = Categoria.objects.get_or_create(
                nome=cat_data['nome'],
                defaults={
                    'tipo': cat_data['tipo'],
                    'descricao': cat_data['descricao'],
                    'padrao': True  # Marcar como categoria padr√£o
                }
            )
            
            # Se a categoria j√° existia mas n√£o estava marcada como padr√£o, atualizar
            if not created and not categoria.padrao:
                categoria.padrao = True
                categoria.save()
                print(f"üîÑ Categoria marcada como padr√£o: {categoria.nome}")
            
            if created:
                categorias_criadas += 1
                print(f"‚úÖ Criada categoria: {categoria.nome} ({categoria.tipo})")
            else:
                categorias_existentes += 1
                print(f"‚ÑπÔ∏è Categoria j√° existe: {categoria.nome} ({categoria.tipo})")
        
        print(f"üìä Resumo: {categorias_criadas} criadas, {categorias_existentes} existentes")
        print(f"üéâ Total de categorias no sistema: {Categoria.objects.count()}")
        print("=== CATEGORIAS PADR√ÉO VERIFICADAS ===") 